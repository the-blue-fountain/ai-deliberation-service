# Generated by Django 5.1.2 on 2025-10-25 17:57

import django.db.models.deletion
from django.db import migrations, models


def bootstrap_discussion_session(apps, schema_editor):
    DiscussionSession = apps.get_model('core', 'DiscussionSession')
    UserConversation = apps.get_model('core', 'UserConversation')
    SiteConfiguration = apps.get_model('core', 'SiteConfiguration')

    config = SiteConfiguration.objects.first()
    if config:
        session = DiscussionSession.objects.create(
            s_id='legacy',
            topic=config.topic,
            user_system_prompt=config.user_system_prompt,
            moderator_system_prompt=config.moderator_system_prompt,
            expected_users=config.expected_users,
        )
    else:
        session = DiscussionSession.objects.create(s_id='default')

    UserConversation.objects.update(session=session)


def noop_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscussionSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s_id', models.CharField(max_length=64, unique=True)),
                ('topic', models.CharField(blank=True, max_length=255)),
                ('user_system_prompt', models.TextField(blank=True, default="You are a well-informed reporter already familiar with the subject matter and you are holding a thoughtful discussion to understand another person's opinions. Stay on the moderator-defined topic, challenge inconsistencies respectfully, and keep the dialogue collaborative rather than interrogative. Always dig beneath surface statements and notice strength of sentiment, uncertainty, or indifference. Track nuanced shifts across the entire conversation.\n\nWork through the user's latest response with explicit chain-of-thought reasoning in your private notes before answering. Segment the response into clear bullet points that capture the user's intent, tone, and confidence. Compare each point with what you have already learned to decide whether genuine new information is present. Request clarifications when vagueness or contradictions appear.\n\nNever mention or expose the chain-of-thought itself when speaking to the user. Keep the tone professional and inquisitive.")),
                ('moderator_system_prompt', models.TextField(blank=True, default="You are an impartial moderator distilling multiple expert perspectives. Read each user views document carefully. Maintain a temp.md scratchpad containing your step-by-step reasoning, hypotheses, and cross-user comparisons. After studying every user, review that scratchpad to craft summary.md with a nuanced, pointwise comparison. Highlight areas of consensus, disagreement, strength of sentiment, confusion, and missing information. Present both artefacts as JSON with fields 'moderator_temp' and 'summary_md'.")),
                ('expected_users', models.PositiveIntegerField(default=1)),
                ('knowledge_base', models.TextField(blank=True)),
                ('rag_chunk_count', models.PositiveIntegerField(default=0)),
                ('rag_last_built_at', models.DateTimeField(blank=True, null=True)),
                ('moderator_temp', models.TextField(blank=True)),
                ('moderator_summary', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('-updated_at', '-id'),
            },
        ),
        migrations.AlterModelOptions(
            name='userconversation',
            options={'ordering': ('session_id', 'user_id')},
        ),
        migrations.AddField(
            model_name='userconversation',
            name='scratchpad',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='userconversation',
            name='views_markdown',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='userconversation',
            name='user_id',
            field=models.PositiveIntegerField(),
        ),
        migrations.AddField(
            model_name='userconversation',
            name='session',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='core.discussionsession'),
        ),
        migrations.RunPython(bootstrap_discussion_session, noop_reverse),
        migrations.AlterField(
            model_name='userconversation',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='core.discussionsession'),
        ),
        migrations.AddConstraint(
            model_name='userconversation',
            constraint=models.UniqueConstraint(fields=('session', 'user_id'), name='unique_user_per_session'),
        ),
        migrations.DeleteModel(
            name='SiteConfiguration',
        ),
    ]
